[ui]                                                                            
username=strager <s@strager.net>
                                                                                
ignore.local=.stragerignore
ignore.user=~/.gitignore

merge = internal:mergediff

[extensions]                                                                    
# Enable the advanced 'sl reset' command.
reset =

[experimental]
graphshorten = true
graph.show-abbreviated-ancestors = onlymerge
copytrace = on

[copytrace]
dagcopytrace = true

[commands]
naked-default.in-repo = strager-fulllog
naked-default.no-repo = strager-fulllog

[alias]
strager-focusedlog = smartlog --template '{strager_log}' -r 'focusedsmartlog(.)'
strager-fulllog = smartlog --all --template '{strager_log}'

# Download a GitHub pull request, fold its commits, edit its message, rebase it
# onto ., and switch to it.
foldpr = !
    set -e
    pr_id=$1
    SL="${CHGHG:-sl}"
    current="$("${SL}" log -r . -T '{node}')"
    # Ensure 'pr1234' refers to the commit pulled by 'sl pr pull', not some old
    # commit.
    if "${SL}" log -r "pr${pr_id}" 2>/dev/null; then
      "${SL}" pr unlink -r "pr${pr_id}";
    fi
    "${SL}" pr pull "${pr_id}"
    "${SL}" fold --exact -r "pr${pr_id} % ${current}" || :
    "${SL}" goto "pr${pr_id}"
    "${SL}" rebase -d "${current}"

[pager]
ignore = smartlog

[smartlog]
indentnonpublic = False

[committemplate]
defaulttitle = ""
emptymsg = "{if(title, title, '')}"

[templatealias]
strager_log = "{label(strager_log_top_label,
                      ifeq(phase, 'public',
                           ifeq(graphnode, '@',
                                strager_log_public_current,
                                strager_log_public_noncurrent),
                           strager_log_draft))}"
strager_log_top_label = "{ifeq(graphnode, '@', 'strager_log.current',
                          ifeq(graphnode, 'x', 'strager_log.hidden',
                          ''))}"

strager_log_draft = "{strager_log_draft_node}{separate(' ', strager_log_description, github_sl_difflink)}{strager_log_successors}"
strager_log_draft_node = "{strager_log_graph_align(strager_log_node)} "

strager_log_successors = "{ifeq(graphnode, 'x', ' ({strager_log_successors_noun}: {strager_log_successor_nodes})', '')}"
strager_log_successors_noun = "successor"
strager_log_successor_nodes = "{revset('successors({node}) & !{node}') % '{strager_log_unlabeled_node}'}"

strager_log_public_current = "{strager_log_draft}"

strager_log_public_noncurrent = "{strager_log_public_date}{ifeq(remotebookmarks, '', '', strager_log_public_with_bookmark)}"
strager_log_public_with_bookmark = "{strager_log_maybe_label('strager_log.revision', strager_log_remotebookmarks)}"
strager_log_public_date = "{strager_log_graph_align(strager_log_date)} "

strager_log_node = "{strager_log_maybe_label('strager_log.revision', strager_log_unlabeled_node)}"
strager_log_unlabeled_node = "{ifeq(strager_log_all_bookmarks, '', strager_log_unlabeled_node_hash, strager_log_unlabeled_node_bookmark)}"
strager_log_unlabeled_node_bookmark = "{strager_log_all_bookmarks}"
strager_log_unlabeled_node_hash = "{shortest(node, strager_log_node_width)}"
strager_log_node_width = 6

strager_log_all_bookmarks = "{separate(' ', bookmarks, strager_log_remotebookmarks)}"

strager_log_remotebookmarks = strip(remotebookmarks % " {hyperlink(strager_github_branch_url(remotebookmarks), remotebookmarks)}")

strager_log_date = "{strager_log_maybe_label('strager_log.date', age(date))}"
strager_log_description = "{firstline(desc)}"

strager_log_graph_align(text) = pad(text, strager_log_graph_alignment_width, ' ')
strager_log_graph_alignment_width = strager_log_graph_align_column - graphwidth
strager_log_graph_align_column = 12

strager_log_maybe_label(label_, text) = ifeq(strager_log_top_label, '', label(label_, text), text)

strager_github_branch_url(remote_bookmark) = "{sub("ssh://git@github.com/([^/]+)/([^/]+)\.git/?", "https://github.com/\\1/\\2/tree/{sub("remote/", "", remote_bookmark)}", peerurls.default)}"

[color]
strager_graphnode.working = magenta
strager_log.abandoned = black
strager_log.committed = black
strager_log.current = magenta
strager_log.date = brightblue
strager_log.description =
strager_log.hidden = black
strager_log.revision = brightyellow

# Use the default colors for some things, but replace 'bold' with 'bright' for
# familiarity.
diff.diffline = brightcyan
diff.extended = brightcyan
diff.file_a = brightred
diff.file_b = brightgreen
log.changeset = brightblue
status.added = brightgreen
status.deleted = brightcyan underline
status.ignored = brightblack
status.modified = brightblue
status.removed = brightred
status.unknown = brightmagenta underline

# Distinguish descendant processes from selected processes in 'hg
# debugprocesstree'.
processtree.descendants = none
processtree.selected = green

[isl]
hasShownGettingStarted = true

[copytrace]
dagcopytrace = true
